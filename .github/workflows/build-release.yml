name: Build Release

on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read action args on Windows
        if: runner.os == 'Windows'
        id: read-args-windows
        shell: pwsh
        run: |
          $args = Get-Content -Path "action_args.json" | ConvertFrom-Json
          echo "sha=$($args.sha)" >> $env:GITHUB_OUTPUT

      - name: Read action args on macOS/Linux
        if: runner.os != 'Windows'
        id: read-args-unix
        run: |
          sha=$(cat action_args.json | grep -o '"sha": *"[^"]*"' | grep -o '"[^"]*"$' | tr -d '"')
          echo "sha=$sha" >> $GITHUB_OUTPUT

      - name: Install PowerShell on macOS
        if: runner.os == 'macOS'
        run: |
          brew install --cask powershell

      - name: Install PowerShell on Linux
        if: runner.os == 'Linux'
        run: |
          # Update package index
          sudo apt-get update
          # Install prerequisites
          sudo apt-get install -y wget apt-transport-https software-properties-common
          # Download and install Microsoft signing key
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          # Update package index after adding Microsoft repository
          sudo apt-get update
          # Install PowerShell
          sudo apt-get install -y powershell

      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        run: |
          winget install -e --id Git.Git
          winget install -e --id Kitware.CMake
          winget install -e --id Python.Python.3.9

      
      - name: Install Windows SDK v10.0.26100.0
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" modify --installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" --quiet --force --norestart --add Microsoft.VisualStudio.Component.Windows11SDK.26100


      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: |
          brew install cmake
          brew install python@3.9

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y git cmake python3 python3-pip python3-venv clang libx11-dev libx11-xcb-dev libxcb1-dev

      - name: Build project
        run: |
          pwsh build_dawn.ps1 -sha ${{ steps.read-args-windows.outputs.sha || steps.read-args-unix.outputs.sha }} -skipDependencies


      - name: Create zip archive on Windows
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path "dawn_build_output\*" -DestinationPath "dawn-${{ runner.os }}-x64.zip"

      - name: Create zip archive on macOS/Linux
        if: runner.os != 'Windows'
        run: |
          cd dawn_build_output && zip -r "../dawn-${{ runner.os }}-x64.zip" . && cd ..

      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: dawn-${{ runner.os }}-x64
          path: dawn-${{ runner.os }}-x64.zip

      - name: Upload to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dawn-${{ runner.os }}-x64.zip
          asset_name: dawn-${{ runner.os }}-x64.zip
          asset_content_type: application/zip
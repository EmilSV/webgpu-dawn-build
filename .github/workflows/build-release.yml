name: Build Release

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  GetDawnVersion:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get-newest-SHA.outputs.sha }}
      release_tag: ${{ steps.check-release.outputs.release_tag }}
      should_build: ${{ steps.check-release.outputs.should_build }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest stable Chromium version and Dawn branch
        id: get-chromium-version
        run: |
          # Fetch Chromium milestone data
          response=$(curl -s "https://chromiumdash.appspot.com/fetch_milestones?only_branched=true")
          
          # Find the newest stable milestone
          stable_milestone=$(echo "$response" | jq -r '.[] | select(.schedule_phase == "stable" and .schedule_active == true) | .milestone' | sort -nr | head -1)
          
          # Get the Dawn branch for this milestone
          dawn_branch=$(echo "$response" | jq -r ".[] | select(.milestone == $stable_milestone) | .dawn_branch")
          
          echo "Found stable milestone: $stable_milestone with Dawn branch: $dawn_branch"
          echo "milestone=$stable_milestone" >> $GITHUB_OUTPUT
          echo "dawn_branch=$dawn_branch" >> $GITHUB_OUTPUT

      - name: get newest commit SHA
        id: get-newest-SHA
        run: |
          sha=$(git ls-remote https://dawn.googlesource.com/dawn chromium/${{ steps.get-chromium-version.outputs.dawn_branch }} | cut -f1)
          echo "Found SHA: $sha"
          echo "sha=$sha" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check-release
        run: |
          sha="${{ steps.get-newest-SHA.outputs.sha }}"
          milestone="${{ steps.get-chromium-version.outputs.milestone }}"
          
          # Create a release tag based on milestone and short SHA
          short_sha=$(echo "$sha" | cut -c1-7)
          release_tag="dawn-m${milestone}-${short_sha}"

          # Check if release already exists
          if gh release view "$release_tag" > /dev/null 2>&1; then
            echo "Release $release_tag already exists, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Release $release_tag does not exist, proceeding with build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
          
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ${{ matrix.os }}
    needs: GetDawnVersion
    if: needs.GetDawnVersion.outputs.should_build == 'true'

    strategy:
      matrix:
        include:
          - os: windows-2025
            arch: x64
          - os: windows-2025
            arch: arm64
          - os: macos-15-large
            arch: x64
          - os: macOS-latest
            arch: arm64
          - os: ubuntu-latest
            arch: x64
          - os: ubuntu-24.04-arm
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PowerShell on macOS
        if: runner.os == 'macOS'
        run: |
          brew install --cask powershell

      - name: Install PowerShell on Linux
        if: runner.os == 'Linux'
        run: |
          sudo snap install powershell --classic || sudo snap install --edge --classic powershell

      - name: Build project
        run: |
          pwsh build_dawn.ps1 -sha ${{ needs.GetDawnVersion.outputs.sha }} -architecture ${{ matrix.arch }}

      - name: Create zip archive on Windows
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path "dawn_build_output\*" -DestinationPath "dawn-${{ runner.os }}-${{ matrix.arch }}.zip"

      - name: Create zip archive on macOS/Linux
        if: runner.os != 'Windows'
        run: |
          cd dawn_build_output && zip -r "../dawn-${{ runner.os }}-${{ matrix.arch }}.zip" . && cd ..

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: dawn-${{ runner.os }}-${{ matrix.arch }}
          path: dawn-${{ runner.os }}-${{ matrix.arch }}.zip
  
  release:
    runs-on: ubuntu-latest
    needs: [GetDawnVersion, build]
    if: needs.GetDawnVersion.outputs.should_build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -la ./artifacts/

      - name: Create GitHub release with all artifacts
        run: |
          gh release create "${{ needs.GetDawnVersion.outputs.release_tag }}" ./artifacts/*.zip \
            --title "Dawn Build ${{ needs.GetDawnVersion.outputs.release_tag }}" \
            --notes "Automated build from Dawn commit ${{ needs.GetDawnVersion.outputs.sha }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          

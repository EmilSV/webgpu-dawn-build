name: Build Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2025]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read action args on Windows
        if: runner.os == 'Windows'
        id: read-args-windows
        shell: pwsh
        run: |
          $args = Get-Content -Path "action_args.json" | ConvertFrom-Json
          echo "sha=$($args.sha)" >> $env:GITHUB_OUTPUT
          echo "releaseTag=$($args.releaseTag)" >> $env:GITHUB_OUTPUT

      - name: Read action args on macOS/Linux
        if: runner.os != 'Windows'
        id: read-args-unix
        run: |
          sha=$(jq -r '.sha' action_args.json)
          releaseTag=$(jq -r '.releaseTag' action_args.json)
          echo "sha=$sha" >> $GITHUB_OUTPUT
          echo "releaseTag=$releaseTag" >> $GITHUB_OUTPUT

      - name: Install PowerShell on macOS
        if: runner.os == 'macOS'
        run: |
          brew install --cask powershell

      - name: Install PowerShell on Linux
        if: runner.os == 'Linux'
        run: |
          # Update package index
          sudo apt-get update
          # Install prerequisites
          sudo apt-get install -y wget apt-transport-https software-properties-common
          # Download and install Microsoft signing key
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          # Update package index after adding Microsoft repository
          sudo apt-get update
          # Install PowerShell
          sudo apt-get install -y powershell

      - name: Build project
        run: |
          pwsh build_dawn.ps1 -sha ${{ steps.read-args-windows.outputs.sha || steps.read-args-unix.outputs.sha }}"


      - name: Create zip archive on Windows
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path "dawn_build_output\*" -DestinationPath "dawn-${{ runner.os }}-x64.zip"

      - name: Create zip archive on macOS/Linux
        if: runner.os != 'Windows'
        run: |
          cd dawn_build_output && zip -r "../dawn-${{ runner.os }}-x64.zip" . && cd ..

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: dawn-${{ runner.os }}-x64
          path: dawn-${{ runner.os }}-x64.zip

      - name: Creates a release in GitHub and uploads attachments
        run: |
            gh release create ${{ steps.read-args-windows.outputs.releaseTag || steps.read-args-unix.outputs.releaseTag }} dawn-${{ runner.os }}-x64.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}